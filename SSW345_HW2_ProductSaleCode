from __future__ import annotations
from typing import List, Optional

# Forward reference used for class Sale
class Product:
    __lastSale: Optional[Sale] = None
    __inventory: int = 0 

    def __init__(self, sale: Optional[Sale] = None, inventory: int = 0):
        self.__lastSale = sale
        self.__inventory = inventory

    def setLastSale(self, lastSale: Sale):
        self.__lastSale = lastSale

    def reduceInventory(self, amount: int):
        if amount > self.__inventory:
            raise ValueError("Not enough inventory to reduce")
        self.__inventory -= amount

    def addInventory(self, amount: int):
        self.__inventory += amount

    def checkInventory(self) -> int:
        return self.__inventory
    
    @property
    def getLastSale(self) -> Optional[Sale]:
        return self.__lastSale

    def __getitem__(self, item):
        return self

# No forward reference needed since Product is defined
class Sale:
    __saleTimes = 0
    __productSold: List[Product] = []

    def __init__(self, products: List[Product]):
        Sale.__saleTimes += 1
        self.__products = products
        self.__saleNumber = Sale.__saleTimes

        for product in products:
            product.setLastSale(self)
            product.reduceInventory(1)  # Assume 1 product sold per sale

    def setProductsSold(self, productSold: List[Product]):
        self.__productSold = productSold

    @property
    def getSaleNumber(self) -> int:
        return self.__saleNumber

# Implementation
productOne = Product(inventory=7)
productTwo = Product(inventory=6)

saleOne = Sale([productOne, productTwo])
saleTwo = Sale([productOne])
saleThree = Sale([productTwo])

print(f"Product One Last Sale Number: {productOne.getLastSale.getSaleNumber}")
print(f"Product Two Last Sale Number: {productTwo.getLastSale.getSaleNumber}")

print(f"Product One Inventory: {productOne.checkInventory()}")
print(f"Product Two Inventory: {productTwo.checkInventory()}")
